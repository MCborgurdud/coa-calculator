{"version":3,"sources":["components/Header.jsx","components/Attribute.jsx","components/Display.jsx","components/ToggleButtons.jsx","components/Boosts.jsx","components/Footer.jsx","components/CustomSwitch.jsx","components/Checkbox.jsx","tabs/Smithing.jsx","tabs/Crafting.jsx","tabs/Cooking.jsx","tabs/Spellbinding.jsx","tabs/Mining.jsx","tabs/Woodcutting.jsx","tabs/Fishing.jsx","tabs/Combat.jsx","Home.jsx","App.js","index.js"],"names":["Header","title","currentTheme","updateTheme","AppBar","position","Toolbar","Typography","variant","color","noWrap","Attribute","maxValue","attributeName","value","percentageValue","updateAttribute","updateAttribute2","isCurrentLevel","Box","sx","display","alignItems","justifyContent","TextField","label","type","onFocus","event","target","select","onChange","newValue","sanitizedValue","replace","numericValue","parseInt","Math","floor","inputProps","inputMode","margin","maxWidth","minWidth","toString","InputProps","endAdornment","InputAdornment","onBlur","Number","isNaN","checkIfNaN","valueAsNumber","length","startsWith","checkAndUpdateValue2","Display","level","levelPercentage","targetLevel","element","boosts","boostsEquipSets","keywords","applyBoostOnSmelt","buyOrSmeltBars","skill","lolliPrice","React","useState","expGap","setExpGap","addCommas","num","calculateElementXpBoost","elementXP","i","active","useEffect","currentLevelExp","expData","targetLevelExp","ceil","flexWrap","parseFloat","List","dense","ListItem","ListItemText","primary","secondary","Object","keys","map","subelement","StyledToggleButtonGroup","styled","ToggleButtonGroup","theme","borderColor","borderRadius","spacing","shape","ToggleButtons","updateElement","skillsData","currentLevel","selectedElement","setSelectedElement","handleChange","newElement","currentTarget","createCombatButtons","levelRange","marginBottom","marginLeft","marginRight","Accordion","AccordionSummary","expandIcon","id","AccordionDetails","attribute","size","exclusive","padding","ToggleButton","onClick","src","process","width","height","alt","undefined","marginTop","disabled","Boosts","updateBoosts","selectedBoost","setSelectedBoost","newBoost","boostsCopy","boost","name","includes","style","Footer","component","Container","align","Link","href","rel","Date","getFullYear","Div","typography","button","CustomSwitch","updateValue","falseText","trueText","Grid","container","flexGrow","item","Switch","checked","BoostCheckbox","updateApplyBoostOnSmelt","FormGroup","FormControlLabel","control","Checkbox","onLoad","Smithing","updateCurrentLevel","updateTargetLevel","currentPercentage","updateCurrentPercentage","setElement","boostsDidUpdate","setBoostDidUpdate","setBoosts","setBoostsEquipSets","isEquipSet","setApplyBoostOnSmelt","setBuyOrSmeltBars","artisanData","Crafting","Cooking","selectFoodOrBait","setSelectFoodOrBait","Spellbinding","Mining","gatheringData","Woodcutting","Fishing","setLolliPrice","selectFishOrBait","setSelectFishOrBait","Combat","monster","setMonster","monsterData","updatedBoostName","Home","props","match","history","updateCurrentTheme","page","params","tabNameToIndex","smithing","crafting","cooking","spellbinding","mining","woodcutting","fishing","combat","selectedTab","setSelectedTab","skillLevels","setSkillLevels","updateSkillLevel","prev","console","log","username","setUsername","fetchUserLevel","useCallback","a","fetch","response","ok","Error","json","data","prevSkillLevels","updatedSkillLevels","forEach","currentExp","xp","nextLevelExp","percentage","round","min","max","error","debouncedFetchUserLevel","useMemo","debounce","trim","paddingTop","e","newUsername","borderBottom","Tabs","push","Tab","App","exact","from","to","path","render","createTheme","palette","mode","rootElement","document","getElementById","ReactDOM","StrictMode","ThemeProvider","CssBaseline"],"mappings":"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","file":"static/js/main.1f6eda55.chunk.js","sourcesContent":["import AppBar from \"@mui/material/AppBar\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\n// import IconButton from '@mui/material/IconButton';\n// import Brightness4Icon from '@mui/icons-material/Brightness4';\n// import Brightness7Icon from '@mui/icons-material/Brightness7';\n\nconst Header = ( {title, currentTheme, updateTheme} ) => {\n  return (\n    <AppBar position=\"relative\">\n      <Toolbar>\n        <Typography variant=\"h6\" color=\"inherit\" noWrap>\n          {title}\n          {/* <IconButton\n            sx={{ ml: 1 }}\n            onClick={updateTheme}\n            color=\"inherit\"\n          >\n            {currentTheme === \"dark\" ? (\n              <Brightness7Icon />\n            ) : (\n              <Brightness4Icon />\n            )}\n          </IconButton> */}\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport Box from \"@mui/material/Box\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\n\nconst Attribute = ({\n  maxValue,\n  attributeName,\n  value, // Value for the main level field\n  percentageValue, // Value for the percentage field\n  updateAttribute,\n  updateAttribute2,\n  isCurrentLevel,\n}) => {\n  const checkAndUpdateValue = (newValue) => {\n    let finalValue;\n    newValue = Math.floor(newValue);\n\n    if (newValue > 0 || newValue === null) {\n      if (newValue >= maxValue) {\n        finalValue = maxValue;\n      } else {\n        finalValue = newValue;\n      }\n    } else if (newValue < 0) {\n      finalValue = 0;\n    } else {\n      finalValue = newValue;\n    }\n    // Update parent component attribute\n    updateAttribute(finalValue);\n  };\n\n  const checkAndUpdateValue2 = (newValue) => {\n    let finalValue;\n    newValue = Math.floor(newValue);\n\n    if (newValue > 0 || newValue === null) {\n      if (newValue >= 99) {\n        finalValue = 99; // Cap percentage at 99\n      } else {\n        finalValue = newValue;\n      }\n    } else if (newValue < 0) {\n      finalValue = 0;\n    } else {\n      finalValue = newValue;\n    }\n    // Update parent component attribute2\n    updateAttribute2(finalValue);\n  };\n\n  const checkIfNaN = (value) => {\n    if (Number.isNaN(value)) {\n      updateAttribute2(0);\n    }\n  };\n\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n      }}\n    >\n      <TextField\n        label={attributeName}\n        type=\"text\" // Change to \"text\" to fully control input\n        value={value || \"\"} // Ensure value is a valid string\n        onFocus={(event) => {\n          event.target.select();\n        }}\n        onChange={(event) => {\n          const input = event.target.value;\n          const sanitizedValue = input.replace(/[^0-9]/g, \"\"); // Remove non-numeric characters\n          const numericValue = sanitizedValue === \"\" ? 0 : parseInt(sanitizedValue, 10);\n          checkAndUpdateValue(numericValue);\n        }}\n        inputProps={{\n          inputMode: \"numeric\", // Use numeric input mode\n        }}\n        sx={{\n          \"& > :not(style)\": {\n            margin: 1,\n            maxWidth: \"25ch\",\n            minWidth: \"25ch\",\n          },\n        }}\n      />\n      {isCurrentLevel ? (\n        <TextField\n          type=\"number\"\n          value={percentageValue.toString()} // Ensure the value is always a string\n          InputProps={{\n            endAdornment: <InputAdornment>%</InputAdornment>,\n          }}\n          onFocus={(event) => {\n            event.target.select();\n          }}\n          onBlur={(event) => {\n            checkIfNaN(event.target.valueAsNumber);\n          }}\n          onChange={(event) => {\n            let newValue = event.target.value;\n\n            // Prevent multiple leading zeros\n            if (newValue.length > 1 && newValue.startsWith(\"0\")) {\n              newValue = newValue.replace(/^0+/, \"0\"); // Replace multiple leading zeros with a single \"0\"\n            }\n\n            // Ensure the value is numeric\n            const numericValue = parseInt(newValue, 10);\n            if (!Number.isNaN(numericValue)) {\n              checkAndUpdateValue2(numericValue); // Update the percentage value in the parent state\n            } else {\n              updateAttribute2(0); // Default to 0 if the input is invalid\n            }\n          }}\n          inputProps={{\n            inputMode: \"numeric\", // Use numeric input mode\n          }}\n          sx={{\n            \"& > :not(style)\": {\n              margin: 1,\n              minWidth: \"8ch\",\n              maxWidth: \"8ch\",\n            },\n          }}\n        />\n      ) : null}\n    </Box>\n  );\n};\n\nexport default Attribute;\n","import React from \"react\";\n\nimport Box from \"@mui/material/Box\";\nimport List from \"@mui/material/List\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemText from \"@mui/material/ListItemText\";\n\nimport expData from \"../data/exp_data.json\";\n\nconst Display = ({\n  level,\n  levelPercentage,\n  targetLevel,\n  element,\n  boosts,\n  boostsEquipSets = [],\n  keywords,\n  applyBoostOnSmelt,\n  buyOrSmeltBars,\n  skill,\n  lolliPrice,\n}) => {\n  const [expGap, setExpGap] = React.useState(0);\n\n  const addCommas = (num) => {\n    return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  };\n\n  const calculateElementXpBoost = (elementXP) => {\n    for (let i = 0; i < boosts.length; i++) {\n      if (boosts[i].active) {\n        elementXP *= boosts[i].value;\n      }\n    }\n    for (let i = 0; i < boostsEquipSets.length; i++) {\n      if (boostsEquipSets[i].active) {\n        elementXP *= boostsEquipSets[i].value;\n      }\n    }\n    return Math.floor(elementXP);\n  };\n\n  React.useEffect(() => {\n    const currentLevelExp = parseInt(expData[level]) + (parseInt(expData[level + 1]) - parseInt(expData[level])) * (levelPercentage/100);\n    const targetLevelExp = expData[targetLevel];\n    setExpGap(Math.ceil(targetLevelExp - currentLevelExp));\n    // eslint-disable-next-line\n  }, [expData, level, targetLevel, levelPercentage]);\n\n  return (\n    <>\n      <Box\n        sx={{\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          justifyContent: \"center\",\n        }}\n      >\n        {expGap <= 0 || isNaN(parseFloat(expGap)) ? (\n          <></>\n        ) : (\n          <List dense={true}>\n            <ListItem>\n              <ListItemText\n                primary={\"Total exp: \" + addCommas(expGap)}\n                secondary=\"\"\n              />\n            </ListItem>\n            <ListItem>\n              {/* Render total number of selected attribute */}\n              {/* Render empty component if no element is selected */}\n              {element[0] === \"loading\" ? (\n                <></>\n              ) : skill === \"Combat\" ? (\n                <ListItemText\n                  primary={\n                    \"Total \" +\n                    element[0] +\n                    \": \" +\n                    addCommas(\n                      Math.ceil(\n                        expGap / calculateElementXpBoost(element[1][\"xp\"])\n                      )\n                    ) +\n                    \" (\" +\n                    element[1][\"xp\"] +\n                    \" exp per kill)\"\n                  }\n                />\n              ) : skill === \"Smithing\" ? (\n                // Render results for Smithing\n                buyOrSmeltBars ? (\n                  // Don't include smelting XP\n                  // Exception for Naturite and other resources that don't forge\n\n                  <ListItemText\n                    primary={\n                      \"Total \" +\n                      element[0] +\n                      \" \" +\n                      keywords[0] +\n                      \": \" +\n                      addCommas(\n                        Math.ceil(\n                          expGap /\n                            calculateElementXpBoost(element[1][\"xp-forge\"])\n                        )\n                      )\n                    }\n                  />\n                ) : applyBoostOnSmelt ? (\n                  // Include and apply Boosts on bar Smelting\n                  // Exception for Naturite and other resources that don't forge\n                  element[1][\"xp-forge\"] === \"0\" ? (\n                    <></>\n                  ) : (\n                    <ListItemText\n                      primary={\n                        \"Total \" +\n                        element[0] +\n                        \" \" +\n                        keywords[0] +\n                        \": \" +\n                        addCommas(\n                          Math.ceil(\n                            expGap /\n                              (calculateElementXpBoost(element[1][\"xp-forge\"]) +\n                                calculateElementXpBoost(element[1][\"xp-smelt\"]))\n                          )\n                        )\n                      }\n                    />\n                  )\n                ) : (\n                  // Include but don't apply Boosts on bar Smelting\n                  // Exception for Naturite and other resources that don't forge\n                  <ListItemText\n                    primary={\n                      \"Total \" +\n                      element[0] +\n                      \" \" +\n                      keywords[0] +\n                      \": \" +\n                      addCommas(\n                        Math.ceil(\n                          expGap /\n                            (calculateElementXpBoost(element[1][\"xp-forge\"]) +\n                              parseFloat(element[1][\"xp-smelt\"]))\n                        )\n                      )\n                    }\n                  />\n                )\n              ) : skill === \"Crafting\" ? (\n                // Render results for Crafting\n                // Cursed relics exception\n                element[0] === \"Cursed\" ? (\n                  // <>\n                  <ListItemText\n                    primary={\n                      \"Total \" +\n                      element[0] +\n                      \" Relics: \" +\n                      addCommas(\n                        Math.ceil(\n                          expGap / calculateElementXpBoost(element[1][\"xp\"])\n                        )\n                      )\n                    }\n                  />\n                ) : (\n                  // <>\n                  <ListItemText\n                    primary={\n                      \"Total \" +\n                      keywords[0] +\n                      \" \" +\n                      element[0] +\n                      \": \" +\n                      addCommas(\n                        Math.ceil(\n                          expGap / calculateElementXpBoost(element[1][\"xp\"])\n                        )\n                      )\n                    }\n                  />\n                )\n              ) : (\n                // Render results for Cooking\n                <ListItemText\n                  primary={\n                    \"Total \" +\n                    keywords[0] +\n                    \" \" +\n                    element[0] +\n                    \": \" +\n                    addCommas(\n                      Math.ceil(\n                        expGap / calculateElementXpBoost(element[1][\"xp\"])\n                      )\n                    )\n                  }\n                />\n              )}\n            </ListItem>\n\n            {/* Render subelements */}\n            {element[0] === \"loading\" ? (\n              <></>\n            ) : skill === \"Combat\" ? (\n              <ListItem>\n                <ListItemText\n                  primary={\n                    \"Total gold: \" +\n                    addCommas(\n                      Math.ceil(\n                        expGap / calculateElementXpBoost(element[1][\"xp\"])\n                      ) * element[1][\"gold\"]\n                    ) +\n                    \" (\" +\n                    element[1][\"gold\"] +\n                    \" gold per kill)\"\n                  }\n                />\n              </ListItem>\n            ) : (\n              Object.keys(element[1][\"submaterials\"]).map((subelement) => (\n                <ListItem>\n                  {skill === \"Smithing\" ? (\n                    // Don't include smelting XP\n                    buyOrSmeltBars ? (\n                      // Exception for Naturite and other resources that don't forge\n                      element[1][\"xp-forge\"] === \"0\" ? (\n                        <ListItemText\n                          primary={\n                            \"Total \" +\n                            subelement +\n                            \": \" +\n                            addCommas(\n                              Math.ceil(\n                                expGap /\n                                  calculateElementXpBoost(\n                                    element[1][\"xp-smelt\"]\n                                  )\n                              ) * element[1][\"submaterials\"][subelement]\n                            )\n                          }\n                        />\n                      ) : (\n                        <ListItemText\n                          primary={\n                            \"Total \" +\n                            subelement +\n                            \": \" +\n                            addCommas(\n                              Math.ceil(\n                                expGap /\n                                  calculateElementXpBoost(\n                                    element[1][\"xp-forge\"]\n                                  )\n                              ) * element[1][\"submaterials\"][subelement]\n                            )\n                          }\n                        />\n                      )\n                    ) : applyBoostOnSmelt ? (\n                      // Include AND boost Smelting XP\n                      <ListItemText\n                        primary={\n                          \"Total \" +\n                          subelement +\n                          \": \" +\n                          addCommas(\n                            Math.ceil(\n                              expGap /\n                                (calculateElementXpBoost(\n                                  element[1][\"xp-forge\"]\n                                ) +\n                                  calculateElementXpBoost(\n                                    element[1][\"xp-smelt\"]\n                                  ))\n                            ) * element[1][\"submaterials\"][subelement]\n                          )\n                        }\n                      />\n                    ) : (\n                      // Include but DO NOT boost Smelting XP\n                      <ListItemText\n                        primary={\n                          \"Total \" +\n                          subelement +\n                          \": \" +\n                          addCommas(\n                            Math.ceil(\n                              expGap /\n                                (calculateElementXpBoost(\n                                  element[1][\"xp-forge\"]\n                                ) +\n                                  parseFloat(element[1][\"xp-smelt\"]))\n                            ) * element[1][\"submaterials\"][subelement]\n                          )\n                        }\n                      />\n                    )\n                  ) : (\n                    <>\n                      <ListItemText\n                        primary={\n                          \"Total \" +\n                          subelement +\n                          \": \" +\n                          addCommas(\n                            Math.ceil(\n                              expGap / calculateElementXpBoost(element[1][\"xp\"])\n                            ) * element[1][\"submaterials\"][subelement]\n                          )\n                        }\n                      />\n                      {/* {addIcon(\"Woodcutting\", subelement)} */}\n                    </>\n                  )}\n                </ListItem>\n              ))\n            )}\n\n            {/* Render number of inventories */}\n            {/* Render empty component if no element is selected */}\n            {element[0] === \"loading\" ? (\n              <></>\n            ) : skill === \"Crafting\" ? (\n              element[0] === \"Cursed\" ||\n              element[0] === \"Experience\" ||\n              element[0] === \"Ice\" ? (\n                <ListItem>\n                  <ListItemText\n                    primary={\n                      \"Inventories (18 per inventory): \" +\n                      addCommas(\n                        Math.ceil(\n                          expGap /\n                            calculateElementXpBoost(element[1][\"xp\"]) /\n                            18\n                        )\n                      )\n                    }\n                  />\n                </ListItem>\n              ) : element[0] === \"Affliction\" ? (\n                <ListItem>\n                  <ListItemText\n                    primary={\n                      \"Inventories (35 per inventory): \" +\n                      addCommas(\n                        Math.ceil(\n                          expGap /\n                            calculateElementXpBoost(element[1][\"xp\"]) /\n                            35\n                        )\n                      )\n                    }\n                  />\n                </ListItem>\n              ) : (\n                <ListItem>\n                  <ListItemText\n                    primary={\n                      \"Inventories (36 per inventory): \" +\n                      addCommas(\n                        Math.ceil(\n                          expGap /\n                            calculateElementXpBoost(element[1][\"xp\"]) /\n                            36\n                        )\n                      )\n                    }\n                  />\n                </ListItem>\n              )\n            ) : skill === \"Cooking\" ? (\n              <ListItem>\n                <ListItemText\n                  primary={\n                    \"Inventories (18 fish and 18 salt): \" +\n                    addCommas(\n                      Math.ceil(\n                        expGap / calculateElementXpBoost(element[1][\"xp\"]) / 18\n                      )\n                    )\n                  }\n                />\n              </ListItem>\n            ) : skill === \"Mining\" ? (\n              element[0] === \"Naturite\" ? (\n                <ListItem>\n                  <ListItemText\n                    primary={\n                      \"Inventories (100 per inventory): \" +\n                      addCommas(\n                        Math.ceil(\n                          expGap /\n                            calculateElementXpBoost(element[1][\"xp\"]) /\n                            100\n                        )\n                      )\n                    }\n                  />\n                </ListItem>\n              ) : (\n                <ListItem>\n                  <ListItemText\n                    primary={\n                      \"Inventories (36 per inventory): \" +\n                      addCommas(\n                        Math.ceil(\n                          expGap /\n                            calculateElementXpBoost(element[1][\"xp\"]) /\n                            36\n                        )\n                      )\n                    }\n                  />\n                </ListItem>\n              )\n            ) : skill === \"Woodcutting\" ? (\n              <ListItem>\n                <ListItemText\n                  primary={\n                    \"Inventories (36 per inventory): \" +\n                    addCommas(\n                      Math.ceil(\n                        expGap / calculateElementXpBoost(element[1][\"xp\"]) / 36\n                      )\n                    )\n                  }\n                />\n              </ListItem>\n            ) : skill === \"Fishing\" && element[0] === \"Bass bait\" ? (\n              <>\n                <ListItem>\n                  <ListItemText\n                    primary={\n                      \"Total Remote Bank (34 bass per inventory): \" +\n                      addCommas(\n                        Math.ceil(\n                          expGap /\n                            calculateElementXpBoost(element[1][\"xp\"]) /\n                            34\n                        )\n                      )\n                    }\n                  />\n                </ListItem>\n                <ListItem>\n                  <ListItemText\n                    primary={\n                      \"Total Remote Bank price: \" +\n                      addCommas(\n                        Math.ceil(\n                          (expGap /\n                            calculateElementXpBoost(element[1][\"xp\"]) /\n                            34) *\n                            parseInt(lolliPrice) *\n                            0.4\n                        )\n                      ) +\n                      \" Gold\"\n                    }\n                  />\n                </ListItem>\n              </>\n            ) : (\n              <></>\n            )}\n          </List>\n        )}\n      </Box>\n    </>\n  );\n};\n\nexport default Display;\n","import React from \"react\";\nimport { styled } from \"@mui/material/styles\";\nimport ToggleButton from \"@mui/material/ToggleButton\";\nimport ToggleButtonGroup from \"@mui/material/ToggleButtonGroup\";\nimport { Box } from \"@mui/material\";\nimport Accordion from '@mui/material/Accordion';\nimport AccordionSummary from '@mui/material/AccordionSummary';\nimport AccordionDetails from '@mui/material/AccordionDetails';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport Typography from '@mui/material/Typography';\n\nconst StyledToggleButtonGroup = styled(ToggleButtonGroup)(({ theme }) => ({\n  \"&.Mui-selected\": {\n    borderColor: \"#2e7d32\",\n    borderRadius: 9,\n  },\n  \"& .MuiToggleButtonGroup-grouped\": {\n    margin: theme.spacing(0.5),\n    borderRadius: theme.shape.borderRadius,\n    borderColor: \"#bdbdbd\",\n    \"&.Mui-disabled\": {},\n    \"&:not(:first-of-type)\": {\n      borderRadius: theme.shape.borderRadius,\n      borderColor: \"#bdbdbd\",\n    },\n    \"&:first-of-type\": {\n      borderRadius: theme.shape.borderRadius,\n      borderColor: \"#bdbdbd\",\n    },\n  },\n}));\n\n\n\nconst ToggleButtons = ({ updateElement, skillsData, skill, currentLevel }) => {\n  const [selectedElement, setSelectedElement] = React.useState();\n\n  const handleChange = (event, newElement) => {\n    if (event.currentTarget.value !== \"loading\") {\n      setSelectedElement(newElement);\n      if (newElement === null) {\n        updateElement(['loading']);\n      } else {\n        updateElement([\n          event.currentTarget.value,\n          skillsData[skill][event.currentTarget.value],\n        ]);\n      }\n    }\n  };\n\n  const createCombatButtons = (levelRange) => {\n    return (\n      <Box\n        sx={{\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          justifyContent: \"center\",\n          maxWidth: 600,\n          marginBottom: 0.4,\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n        }}\n      >\n\n        <Accordion>\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon />}\n            aria-controls=\"panel1a-content\"\n            id=\"panel1a-header\"\n          >\n            <Typography>Level {levelRange[0]}-{levelRange[1]}</Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            {Object.keys(skillsData[skill]).map((attribute) =>\n              parseInt(skillsData[skill][attribute]['level']) >= levelRange[0] && parseInt(skillsData[skill][attribute]['level']) <= levelRange[1] ? (\n                <StyledToggleButtonGroup\n                  size=\"small\"\n                  value={selectedElement}\n                  exclusive\n                  onChange={handleChange}\n                  sx={{\n                    padding: 0,\n                  }}\n                >\n                  <ToggleButton\n                    value={attribute}\n                    onClick={handleChange}\n                    sx={{\n                      \"& > :not(style)\": {\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        justifyContent: \"center\",\n                      },\n                    }}\n                  >\n                    <Box\n                      sx={{\n                        marginRight: 0.4,\n                      }}\n                    >\n                      <img\n                        src={process.env.PUBLIC_URL + `/images/${skill}/${attribute}.gif`}\n                        width=\"22\"\n                        height=\"22\"\n                        value={attribute}\n                        alt=\"\"\n                      />\n                    </Box>\n                    {attribute}\n                  </ToggleButton>\n                </StyledToggleButtonGroup>\n              ) : (\n                <></>\n              )\n            )}\n          </AccordionDetails>\n        </Accordion>\n      </Box>\n    )\n  }\n\n  return (\n    <Box\n      sx={{\n        \"& > :not(style)\": {\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          justifyContent: \"center\",\n          maxWidth: 450,\n          // marginBottom: 1,\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n        },\n      }}\n    >\n      {skillsData[skill] !== undefined ? (\n        // Custom accordion for Combat\n        skill === 'Combat' ? (\n          <Box\n            sx={{\n              marginTop: 2,\n              marginBottom: 3\n            }}\n          >\n            {createCombatButtons([1, 50])}\n            {createCombatButtons([51, 70])}\n            {createCombatButtons([71, 90])}\n            {createCombatButtons([91, 150])}\n          </Box>\n        ) : (\n          // All of other skill's buttons\n          <StyledToggleButtonGroup\n            size=\"small\"\n            value={selectedElement}\n            exclusive\n            onChange={handleChange}\n            sx={{\n              padding: 1,\n            }}\n          >\n            {Object.keys(skillsData[skill]).map((element) =>\n              currentLevel >= parseInt(skillsData[skill][element]['level']) ? (\n                <ToggleButton\n                  value={element}\n                  onClick={handleChange}\n                  sx={{\n\n                    \"& > :not(style)\": {\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      justifyContent: \"center\",\n                    },\n                  }}\n                >\n                  <Box\n                    sx={{\n                      marginRight: 0.4,\n                    }}\n                  >\n                    <img\n                      src={process.env.PUBLIC_URL + `/images/${skill}/${element}.gif`}\n                      width=\"22\"\n                      height=\"22\"\n                      value={element}\n                      alt=\"\"\n                    />\n                  </Box>\n                  {element}\n                </ToggleButton>\n              ) : (\n                <ToggleButton\n                  value={element}\n                  disabled\n                  sx={{\n                    \"& > :not(style)\": {\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      justifyContent: \"center\",\n                    },\n                  }}\n                >\n                  <Box\n                    sx={{\n                      marginRight: 0.4,\n                    }}\n                  >\n                    <img\n                      src={process.env.PUBLIC_URL + `/images/${skill}/Gray ${element}.gif`}\n                      width=\"22\"\n                      height=\"22\"\n                      value={element}\n                      alt=\"\"\n                    />\n                  </Box>\n                  {element}\n                </ToggleButton>\n              )\n            )}\n          </StyledToggleButtonGroup>\n        )) : (\n        <ToggleButton value=\"loading\" >Loading...</ToggleButton>\n      )\n      }\n    </Box >\n  );\n};\n\nexport default ToggleButtons;\n","import React from \"react\";\n\nimport Box from \"@mui/material/Box\";\nimport { ToggleButton } from \"@mui/material\";\nimport ToggleButtonGroup from \"@mui/material/ToggleButtonGroup\";\nimport { styled } from \"@mui/material/styles\";\n\nconst StyledToggleButtonGroup = styled(ToggleButtonGroup)(({ theme }) => ({\n  \"& .Mui-selected\": {\n    color: \"error\",\n  },\n  \"& .MuiToggleButtonGroup-grouped\": {\n    borderColor: \"#bdbdbd\",\n    \"&:not(:first-of-type)\": {\n    },\n    \"&:first-of-type\": {\n      marginLeft: theme.spacing(1),\n    },\n    \"&:last-of-type\": {\n      marginRight: theme.spacing(1),\n    },\n  },\n}));\n\nconst Boosts = ({ boosts, updateBoosts, exclusive = false }) => {\n  const [selectedBoost, setSelectedBoost] = React.useState([]);\n\n  const handleChange = (event, newBoost) => {\n    // Update the selectedBoost state with the new selected boost(s)\n    setSelectedBoost(newBoost);\n\n    // Create a copy of the boosts array and update the active property\n    let boostsCopy = boosts.map(boost => ({\n      ...boost,\n      // If exclusive is true, only the selected boost is active\n      // If exclusive is false, check if the boost's name is in the newBoost array\n      active: exclusive ? boost.name === newBoost : newBoost.includes(boost.name)\n    }));\n\n    // Call updateBoosts with the updated boostsCopy array\n    updateBoosts(boostsCopy);\n  };\n\n  return (\n    <>\n      <Box\n        sx={{\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          justifyContent: \"center\",\n          marginBottom: 1,\n          marginTop: 1,\n        }}\n      >\n        <StyledToggleButtonGroup\n          size=\"small\"\n          value={selectedBoost}\n          exclusive={exclusive}\n          onChange={(event, newBoost) => handleChange(event, newBoost)}\n        >\n          {boosts !== undefined ? (\n            boosts.map((boost) => (\n              <ToggleButton\n                key={boost.name}\n                value={boost.name}\n                sx={{\n                  \"& > :not(style)\": {\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                  },\n                }}\n              >\n                <Box\n                  sx={{\n                    marginRight: 0.4,\n                  }}\n                >\n                  <img\n                    src={process.env.PUBLIC_URL + `/images/Boosts/${boost.name}.gif`}\n                    style={{ width: 'auto', height: '22px' }}\n                    value={boost.name}\n                    alt=\"\"\n                  />\n                </Box>\n                {boost.name +\n                  \" (+\" +\n                  Math.floor((boost.value - 1) * 100) +\n                  \"%)\"}\n              </ToggleButton>\n\n            ))\n          ) : (\n            <></>\n          )}\n        </StyledToggleButtonGroup>\n      </Box>\n    </>\n  );\n};\n\nexport default Boosts;\n","import Box from \"@mui/material/Box\";\nimport Container from \"@mui/material/Container\";\nimport Typography from \"@mui/material/Typography\";\nimport Link from \"@mui/material/Link\";\n\nconst Footer = () => {\n  return (\n    <Box component=\"footer\" sx={{ marginTop: 5, marginBottom: 2 }}>\n      <Container maxWidth=\"lg\">\n        <Typography\n          variant=\"body2\"\n          align=\"center\"\n          color=\"text.secondary\"\n          component=\"p\"\n        >\n          Made by:{\" \"}\n          <Link\n            color=\"inherit\"\n            href=\"https://discordapp.com/users/chends\"\n            rel=\"noopener\"\n            target=\"_blank\"\n          >\n            chends\n          </Link>\n        </Typography>\n        <Typography\n          variant=\"body2\"\n          align=\"center\"\n          color=\"text.secondary\"\n          component=\"p\"\n        >\n          Huge thanks to the contributor:{\" \"}\n          <Link\n            color=\"inherit\"\n            href=\"https://discordapp.com/users/kamal9365\"\n            rel=\"noopener\"\n            target=\"_blank\"\n          >\n            kamal9365\n          </Link>\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\">\n          {\"All data from \"}\n          <Link\n            color=\"inherit\"\n            href=\"https://www.curseofaros.com/\"\n            rel=\"noopener\"\n            target=\"_blank\"\n          >\n            Curse of Aros\n          </Link>{\" \"}\n          {new Date().getFullYear()}\n          {\".\"}\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\">\n          {\"Feel free to donate here \"}\n          <Link\n            color=\"inherit\"\n            href=\"https://www.patreon.com/CoACalculator\"\n            rel=\"noopener\"\n            target=\"_blank\"\n          >\n            CoA Calculator Patreon\n          </Link>{\" \"}\n        </Typography>\n      </Container>\n    </Box>\n  );\n};\n\nexport default Footer;\n","import * as React from \"react\";\nimport Switch from \"@mui/material/Switch\";\nimport Box from \"@mui/material/Box\";\nimport Grid from \"@mui/material/Grid\";\nimport { styled } from \"@mui/material/styles\";\n\n// const Item = styled(Paper)(({ theme }) => ({\n//   ...theme.typography.body2,\n//   padding: theme.spacing(1),\n//   textAlign: \"center\",\n//   color: theme.palette.text.secondary,\n// }));\n\nconst Div = styled(\"div\")(({ theme }) => ({\n  ...theme.typography.button,\n  //   backgroundColor: theme.palette.background.paper,\n  //   padding: theme.spacing(1),\n}));\n\nconst CustomSwitch = ({ value, updateValue, falseText, trueText, element }) => {\n  const handleChange = () => {\n    updateValue(!value);\n  };\n\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        // maxWidth: \"100\",\n      }}\n    >\n      <Grid\n        // component=\"label\"\n        container\n        sx={{\n          // display: \"flex\",\n          flexGrow: 1,\n          flexWrap: \"wrap\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          marginBottom: 1,\n          marginTop: 1,\n        }}\n        spacing={0}\n      >\n        <Div>{falseText}</Div>\n        <Grid item>\n          {element[0] === \"Naturite\" ? (\n            // Exception for Naturite\n            <Switch\n              checked={true}\n              disabled={true}\n              onChange={handleChange}\n              color=\"default\"\n            />\n          ) : (\n            <Switch\n              checked={!value}\n              disabled={false}\n              onChange={handleChange}\n              color=\"default\"\n            />\n          )}\n        </Grid>\n        <Div>{trueText}</Div>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default CustomSwitch;\n","import Checkbox from \"@mui/material/Checkbox\";\nimport FormGroup from \"@mui/material/FormGroup\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Box from \"@mui/material/Box\";\n\nconst BoostCheckbox = ({\n  applyBoostOnSmelt,\n  updateApplyBoostOnSmelt,\n  element,\n}) => {\n  const handleChange = () => {\n    if (element[0] === \"Naturite\") {\n      updateApplyBoostOnSmelt(true);\n    } else {\n      updateApplyBoostOnSmelt(!applyBoostOnSmelt);\n    }\n  };\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        // maxWidth: \"100\",\n      }}\n    >\n      {element[0] === \"Naturite\" ? (\n        // Exception for Naturite\n        <FormGroup>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={true}\n                onChange={handleChange()}\n                disabled={true}\n                onLoad={handleChange()}\n              />\n            }\n            label=\"Apply Boosts on bar Smelting\"\n          />\n          {/* <FormControlLabel disabled control={<Checkbox />} label=\"Disabled\" /> */}\n        </FormGroup>\n      ) : (\n        <FormGroup>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={applyBoostOnSmelt}\n                onChange={handleChange}\n                disabled={false}\n              />\n            }\n            label=\"Apply Boosts on bar Smelting\"\n          />\n          {/* <FormControlLabel disabled control={<Checkbox />} label=\"Disabled\" /> */}\n        </FormGroup>\n      )}\n    </Box>\n  );\n};\n\nexport default BoostCheckbox;\n","import React, { useState } from \"react\";\n\nimport \"../App.css\";\nimport Attribute from \"../components/Attribute\";\nimport Display from \"../components/Display\";\nimport ToggleButtons from \"../components/ToggleButtons\";\nimport Boosts from \"../components/Boosts\";\nimport Footer from \"../components/Footer\";\nimport CustomSwitch from \"../components/CustomSwitch\";\nimport BoostCheckbox from \"../components/Checkbox\";\n\nimport artisanData from \"../data/artisan_data.json\";\n\nconst Smithing = ({\n  currentLevel,\n  updateCurrentLevel,\n  targetLevel,\n  updateTargetLevel,\n  currentPercentage, // Add currentPercentage prop\n  updateCurrentPercentage, // Add updateCurrentPercentage prop\n}) => {\n  // Person's target element\n  const [element, setElement] = useState([\"loading\"]);\n  const updateElement = (element) => {\n    setElement(element);\n    // Exception for Naturite and others that might not forge\n    if (element[0] === \"Naturite\") {\n      setBuyOrSmeltBars(false);\n    }\n  };\n\n  // Exp boosts\n  const [boostsDidUpdate, setBoostDidUpdate] = useState(false);\n  const [boosts, setBoosts] = useState([\n    { name: \"World Boost\", value: 1.5, active: false },\n    { name: \"Infernal Ring\", value: 1.04, active: false },\n    { name: \"Infernal Hammer\", value: 1.04, active: false },\n  ]);\n  const [boostsEquipSets, setBoostsEquipSets] = useState([\n    { name: \"Smith's Set I, II and III\", value: 1.06, active: false },\n    { name: \"Infernal (Elite) Set\", value: 1.12, active: false },\n  ]);\n  const updateBoosts = (boosts, isEquipSet = false) => {\n    isEquipSet ? setBoostsEquipSets(boosts) : setBoosts(boosts);\n    setBoostDidUpdate(!boostsDidUpdate);\n  };\n  // Apply Boosts on bar smelting control\n  const [applyBoostOnSmelt, setApplyBoostOnSmelt] = useState(false);\n  const updateApplyBoostOnSmelt = (applyBoostOnSmelt) => {\n    setApplyBoostOnSmelt(applyBoostOnSmelt);\n  };\n  // Smelt or buy bars control\n  const [buyOrSmeltBars, setBuyOrSmeltBars] = useState(true);\n  const updateBuyOrSmeltBars = (buyOrSmeltBars) => {\n    setBuyOrSmeltBars(buyOrSmeltBars);\n    // Exception for Naturite and others that might not forge\n    if (element[0] === \"Naturite\") {\n      setBuyOrSmeltBars(true);\n    }\n  };\n\n  return (\n    <>\n      <Attribute\n        maxValue={120}\n        attributeName={\"Your Smithing Level\"}\n        value={currentLevel} // Pass the currentLevel as the value\n        percentageValue={currentPercentage} // Pass the percentage value directly\n        updateAttribute={updateCurrentLevel}\n        updateAttribute2={updateCurrentPercentage}\n        isCurrentLevel={true}\n      />\n      <Attribute\n        maxValue={120}\n        attributeName={\"Target Smithing Level\"}\n        value={targetLevel} // Pass the targetLevel as the value\n        updateAttribute={updateTargetLevel}\n        sx={{\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      />\n      <ToggleButtons\n        updateElement={updateElement}\n        skillsData={artisanData}\n        skill=\"Smithing\"\n        currentLevel={currentLevel}\n      />\n      <CustomSwitch\n        value={buyOrSmeltBars}\n        updateValue={updateBuyOrSmeltBars}\n        element={element}\n        trueText=\"Smelt Bars\"\n        falseText=\"Buy Bars\"\n      />\n      <BoostCheckbox\n        applyBoostOnSmelt={applyBoostOnSmelt}\n        updateApplyBoostOnSmelt={updateApplyBoostOnSmelt}\n        element={element}\n      />\n      <Boosts boosts={boosts} updateBoosts={(boosts) => updateBoosts(boosts, false)} exclusive={false} />\n      <Boosts boosts={boostsEquipSets} updateBoosts={(boosts) => updateBoosts(boosts, true)} exclusive={true} />\n      <Display\n        level={currentLevel}\n        levelPercentage={currentPercentage}\n        targetLevel={targetLevel}\n        element={element}\n        keywords={[\"Bars\"]}\n        boosts={boosts}\n        boostsEquipSets={boostsEquipSets}\n        applyBoostOnSmelt={applyBoostOnSmelt}\n        buyOrSmeltBars={buyOrSmeltBars}\n        skill=\"Smithing\"\n        boostsDidUpdate={boostsDidUpdate}\n      />\n      {/* <StickyHeadTable/> */}\n      <Footer />\n    </>\n  );\n};\n\nexport default Smithing;\n","import React, { useState } from \"react\";\n\nimport \"../App.css\";\nimport Attribute from \"../components/Attribute\";\nimport Display from \"../components/Display\";\nimport ToggleButtons from \"../components/ToggleButtons\";\nimport Boosts from \"../components/Boosts\";\nimport Footer from \"../components/Footer\";\n\nimport artisanData from \"../data/artisan_data.json\";\n\nconst Crafting = ({\n  currentLevel,\n  updateCurrentLevel,\n  targetLevel,\n  updateTargetLevel,\n  currentPercentage, // Add currentPercentage prop\n  updateCurrentPercentage, // Add updateCurrentPercentage prop\n}) => {\n  // Person's target element\n  const [element, setElement] = useState([\"loading\"]);\n  const updateElement = (element) => {\n    setElement(element);\n  };\n\n  // Exp boosts\n  const [boostsDidUpdate, setBoostDidUpdate] = useState(false);\n  const [boosts, setBoosts] = useState([\n    { name: \"World Boost\", value: 1.5, active: false },\n  ]);\n  const [boostsEquipSets, setBoostsEquipSets] = useState([\n    { name: \"Crafter's Set I, II and III\", value: 1.06, active: false },\n    { name: \"Artisan's (Elite) Set\", value: 1.12, active: false },\n  ]);\n  const updateBoosts = (boosts, isEquipSet = false) => {\n    isEquipSet ? setBoostsEquipSets(boosts) : setBoosts(boosts);\n    setBoostDidUpdate(!boostsDidUpdate);\n  };\n\n  return (\n    <>\n      <Attribute\n        maxValue={120}\n        attributeName={\"Your Crafting Level\"}\n        value={currentLevel} // Pass the currentLevel as the value\n        percentageValue={currentPercentage} // Pass the percentage value directly\n        updateAttribute={updateCurrentLevel}\n        updateAttribute2={updateCurrentPercentage}\n        isCurrentLevel={true}\n      />\n      <Attribute\n        maxValue={120}\n        attributeName={\"Target Crafting Level\"}\n        value={targetLevel} // Pass the targetLevel as the value\n        updateAttribute={updateTargetLevel}\n        sx={{\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      />\n      <ToggleButtons\n        updateElement={updateElement}\n        skillsData={artisanData}\n        skill=\"Crafting\"\n        currentLevel={currentLevel}\n      />\n      <Boosts boosts={boosts} updateBoosts={(boosts) => updateBoosts(boosts, false)} exclusive={false} />\n      <Boosts boosts={boostsEquipSets} updateBoosts={(boosts) => updateBoosts(boosts, true)} exclusive={true} />\n\n      <Display\n        level={currentLevel}\n        levelPercentage={currentPercentage}\n        targetLevel={targetLevel}\n        element={element}\n        keywords={[\"Relics of\"]}\n        boosts={boosts}\n        boostsEquipSets={boostsEquipSets}\n        boostsDidUpdate={boostsDidUpdate}\n        skill=\"Crafting\"\n      />\n      <Footer />\n    </>\n  );\n};\n\nexport default Crafting;\n","import React, { useState } from \"react\";\n\nimport \"../App.css\";\nimport Attribute from \"../components/Attribute\";\nimport Display from \"../components/Display\";\nimport ToggleButtons from \"../components/ToggleButtons\";\nimport Boosts from \"../components/Boosts\";\nimport Footer from \"../components/Footer\";\nimport CustomSwitch from \"../components/CustomSwitch\";\n\nimport artisanData from \"../data/artisan_data.json\";\n\nconst Cooking = ({\n  currentLevel,\n  updateCurrentLevel,\n  targetLevel,\n  updateTargetLevel,\n  currentPercentage, // Add currentPercentage prop\n  updateCurrentPercentage, // Add updateCurrentPercentage prop\n}) => {\n  // Person's target element\n  const [element, setElement] = useState(['loading']);\n  const updateElement = (element) => {\n    setElement(element);\n  };\n\n\n  // Exp boosts\n  const [boostsDidUpdate, setBoostDidUpdate] = useState(false);\n  const [boosts, setBoosts] = useState([\n    { name: \"World Boost\", value: 1.5, active: false },\n  ]);\n  const [boostsEquipSets, setBoostsEquipSets] = useState([\n    { name: \"Cook's Set I, II and III\", value: 1.06, active: false },\n    { name: \"Chef's (Elite) Set\", value: 1.12, active: false },\n  ]);\n  const updateBoosts = (boosts, isEquipSet = false) => {\n    isEquipSet ? setBoostsEquipSets(boosts) : setBoosts(boosts);\n    setBoostDidUpdate(!boostsDidUpdate);\n  };\n\n  // Select foods or baits\n  const [selectFoodOrBait, setSelectFoodOrBait] = useState(false);\n  const updateselectFoodOrBait = (selectFoodOrBait) => {\n    setSelectFoodOrBait(selectFoodOrBait);\n  };\n\n  return (\n    <>\n      <Attribute\n        maxValue={120}\n        attributeName={\"Your Cooking Level\"}\n        value={currentLevel} // Pass the currentLevel as the value\n        percentageValue={currentPercentage} // Pass the percentage value directly\n        updateAttribute={updateCurrentLevel}\n        updateAttribute2={updateCurrentPercentage}\n        isCurrentLevel={true}\n      />\n      <Attribute\n        maxValue={120}\n        attributeName={\"Target Cooking Level\"}\n        value={targetLevel} // Pass the targetLevel as the value\n        updateAttribute={updateTargetLevel}\n        sx={{\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      />\n      {selectFoodOrBait === false ? (\n        // Render food buttons\n        <ToggleButtons\n          updateElement={updateElement}\n          skillsData={artisanData}\n          skill=\"Cooking-Baits\"\n          currentLevel={currentLevel}\n        />\n      ) : (\n        // Render baits buttons\n        <ToggleButtons\n          updateElement={updateElement}\n          skillsData={artisanData}\n          skill=\"Cooking\"\n          currentLevel={currentLevel}\n        />\n      )}\n      <CustomSwitch\n        value={selectFoodOrBait}\n        updateValue={updateselectFoodOrBait}\n        element={element}\n        falseText=\"Food\"\n        trueText=\"Bait\"\n      />\n      <Boosts boosts={boosts} updateBoosts={(boosts) => updateBoosts(boosts, false)} exclusive={false} />\n      <Boosts boosts={boostsEquipSets} updateBoosts={(boosts) => updateBoosts(boosts, true)} exclusive={true} />\n\n      {selectFoodOrBait === false ? (\n        // Results for food\n        <Display\n          level={currentLevel}\n          levelPercentage={currentPercentage}\n          targetLevel={targetLevel}\n          element={element}\n          keywords={[\"\"]}\n          boosts={boosts}\n          boostsDidUpdate={boostsDidUpdate}\n          skill=\"Cooking\"\n        />\n      ) : (\n        // Results for baits\n        <Display\n          level={currentLevel}\n          levelPercentage={currentPercentage}\n          targetLevel={targetLevel}\n          element={element}\n          keywords={[\"Cooked\"]}\n          boosts={boosts}\n          boostsEquipSets={boostsEquipSets}\n          boostsDidUpdate={boostsDidUpdate}\n          skill=\"Cooking\"\n        />\n      )}\n      <Footer />\n    </>\n  );\n};\n\nexport default Cooking;\n","import React, { useState } from \"react\";\n\nimport \"../App.css\";\nimport Attribute from \"../components/Attribute\";\nimport Display from \"../components/Display\";\nimport ToggleButtons from \"../components/ToggleButtons\";\nimport Boosts from \"../components/Boosts\";\nimport Footer from \"../components/Footer\";\n\nimport artisanData from \"../data/artisan_data.json\";\n\nconst Spellbinding = ({\n  currentLevel,\n  updateCurrentLevel,\n  targetLevel,\n  updateTargetLevel,\n  currentPercentage, // Add currentPercentage prop\n  updateCurrentPercentage, // Add updateCurrentPercentage prop\n}) => {\n  // Person's target element\n  const [element, setElement] = useState(['loading']);\n  const updateElement = (element) => {\n    setElement(element);\n  };\n\n  // Exp boosts\n  const [boostsDidUpdate, setBoostDidUpdate] = useState(false);\n  const [boosts, setBoosts] = useState([\n    { name: \"World Boost\", value: 1.5, active: false },\n  ]);\n  const [boostsEquipSets, setBoostsEquipSets] = useState([\n    { name: \"Binder's Set I, II and III\", value: 1.06, active: false },\n    { name: \"Weaver's (Elite) Set\", value: 1.12, active: false },\n  ]);\n  const updateBoosts = (boosts, isEquipSet = false) => {\n    isEquipSet ? setBoostsEquipSets(boosts) : setBoosts(boosts);\n    setBoostDidUpdate(!boostsDidUpdate);\n  };\n\n  return (\n    <>\n      <Attribute\n        maxValue={120}\n        attributeName={\"Your Spellbinding Level\"}\n        value={currentLevel} // Pass the currentLevel as the value\n        percentageValue={currentPercentage} // Pass the percentage value directly\n        updateAttribute={updateCurrentLevel}\n        updateAttribute2={updateCurrentPercentage}\n        isCurrentLevel={true}\n      />\n      <Attribute\n        maxValue={120}\n        attributeName={\"Target Spellbinding Level\"}\n        value={targetLevel} // Pass the targetLevel as the value\n        updateAttribute={updateTargetLevel}\n        sx={{\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      />\n      <ToggleButtons\n        updateElement={updateElement}\n        skillsData={artisanData}\n        skill=\"Spellbinding\"\n        currentLevel={currentLevel}\n      />\n      <Boosts boosts={boosts} updateBoosts={(boosts) => updateBoosts(boosts, false)} exclusive={false} />\n      <Boosts boosts={boostsEquipSets} updateBoosts={(boosts) => updateBoosts(boosts, true)} exclusive={true} />\n\n      <Display\n        level={currentLevel}\n        levelPercentage={currentPercentage}\n        targetLevel={targetLevel}\n        element={element}\n        keywords={[\"\"]}\n        boosts={boosts}\n        boostsEquipSets={boostsEquipSets}\n        boostsDidUpdate={boostsDidUpdate}\n        skill=\"Spellbinding\"\n      />\n      <Footer />\n    </>\n  );\n};\n\nexport default Spellbinding;\n","import React, { useState } from \"react\";\n\nimport \"../App.css\";\nimport Attribute from \"../components/Attribute\";\nimport Display from \"../components/Display\";\nimport ToggleButtons from \"../components/ToggleButtons\";\nimport Boosts from \"../components/Boosts\";\nimport Footer from \"../components/Footer\";\n\nimport gatheringData from \"../data/gathering_data.json\";\n\nconst Mining = ({\n  currentLevel,\n  updateCurrentLevel,\n  targetLevel,\n  updateTargetLevel,\n  currentPercentage, // Add currentPercentage prop\n  updateCurrentPercentage, // Add updateCurrentPercentage prop\n}) => {\n  // Person's target element\n  const [element, setElement] = useState(['loading']);\n  const updateElement = (element) => {\n    setElement(element);\n  };\n\n  // Exp boosts\n  const [boostsDidUpdate, setBoostDidUpdate] = useState(false);\n  const [boosts, setBoosts] = useState([\n    { name: \"World Boost\", value: 1.5, active: false },\n    { name: \"Prospector's Necklace\", value: 1.05, active: false },\n  ]);\n  const [boostsEquipSets, setBoostsEquipSets] = useState([\n    { name: \"Golem's Set I, II and III\", value: 1.06, active: false },\n    { name: \"Seismic (Elite) Set\", value: 1.12, active: false },\n  ]);\n  const updateBoosts = (boosts, isEquipSet = false) => {\n    isEquipSet ? setBoostsEquipSets(boosts) : setBoosts(boosts);\n    setBoostDidUpdate(!boostsDidUpdate);\n  };\n  return (\n    <>\n      <Attribute\n        maxValue={120}\n        attributeName={\"Your Mining Level\"}\n        value={currentLevel} // Pass the currentLevel as the value\n        percentageValue={currentPercentage} // Pass the percentage value directly\n        updateAttribute={updateCurrentLevel}\n        updateAttribute2={updateCurrentPercentage}\n        isCurrentLevel={true}\n      />\n      <Attribute\n        maxValue={120}\n        attributeName={\"Target Mining Level\"}\n        value={targetLevel} // Pass the targetLevel as the value\n        percentageValue={currentPercentage} // Pass the percentage value directly\n        updateAttribute={updateTargetLevel}\n        sx={{\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      />\n      <ToggleButtons\n        updateElement={updateElement}\n        skillsData={gatheringData}\n        skill=\"Mining\"\n        currentLevel={currentLevel}\n      />\n      <Boosts boosts={boosts} updateBoosts={(boosts) => updateBoosts(boosts, false)} exclusive={false} />\n      <Boosts boosts={boostsEquipSets} updateBoosts={(boosts) => updateBoosts(boosts, true)} exclusive={true} />\n\n      <Display\n        level={currentLevel}\n        levelPercentage={currentPercentage}\n        targetLevel={targetLevel}\n        element={element}\n        keywords={[\"\"]}\n        boosts={boosts}\n        boostsEquipSets={boostsEquipSets}\n        boostsDidUpdate={boostsDidUpdate}\n        skill=\"Mining\"\n      />\n      <Footer />\n    </>\n  );\n};\n\nexport default Mining;\n","import React, { useState } from \"react\";\n\nimport \"../App.css\";\nimport Attribute from \"../components/Attribute\";\nimport Display from \"../components/Display\";\nimport ToggleButtons from \"../components/ToggleButtons\";\nimport Boosts from \"../components/Boosts\";\nimport Footer from \"../components/Footer\";\n\nimport gatheringData from \"../data/gathering_data.json\";\n\nconst Woodcutting = ({\n  currentLevel,\n  updateCurrentLevel,\n  targetLevel,\n  updateTargetLevel,\n  currentPercentage, // Add currentPercentage prop\n  updateCurrentPercentage, // Add updateCurrentPercentage prop\n}) => {\n  // Person's target element\n  const [element, setElement] = useState(['loading']);\n  const updateElement = (element) => {\n    setElement(element);\n  };\n\n  // Exp boosts\n  const [boostsDidUpdate, setBoostDidUpdate] = useState(false);\n  const [boosts, setBoosts] = useState([\n    { name: \"World Boost\", value: 1.5, active: false },\n  ]);\n  const [boostsEquipSets, setBoostsEquipSets] = useState([\n    { name: \"Ent's Set I, II and III\", value: 1.06, active: false },\n    { name: \"Dryad's (Elite) Set\", value: 1.12, active: false },\n  ]);\n  const updateBoosts = (boosts, isEquipSet = false) => {\n    isEquipSet ? setBoostsEquipSets(boosts) : setBoosts(boosts);\n    setBoostDidUpdate(!boostsDidUpdate);\n  };\n\n  return (\n    <>\n      <Attribute\n\n        maxValue={120}\n        attributeName={\"Your Woodcutting Level\"}\n        value={currentLevel} // Pass the currentLevel as the value\n        percentageValue={currentPercentage} // Pass the percentage value directly\n        updateAttribute={updateCurrentLevel}\n        updateAttribute2={updateCurrentPercentage}\n        isCurrentLevel={true}\n      />\n      <Attribute\n\n        maxValue={120}\n        attributeName={\"Target Woodcutting Level\"}\n        value={targetLevel} // Pass the targetLevel as the value\n        updateAttribute={updateTargetLevel}\n        sx={{\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      />\n      <ToggleButtons\n        updateElement={updateElement}\n        skillsData={gatheringData}\n        skill=\"Woodcutting\"\n        currentLevel={currentLevel}\n      />\n      <Boosts boosts={boosts} updateBoosts={(boosts) => updateBoosts(boosts, false)} exclusive={false} />\n      <Boosts boosts={boostsEquipSets} updateBoosts={(boosts) => updateBoosts(boosts, true)} exclusive={true} />\n\n      <Display\n        level={currentLevel}\n        levelPercentage={currentPercentage}\n        targetLevel={targetLevel}\n        element={element}\n        keywords={[\"\"]}\n        boosts={boosts}\n        boostsEquipSets={boostsEquipSets}\n        boostsDidUpdate={boostsDidUpdate}\n        skill=\"Woodcutting\"\n      />\n      <Footer />\n    </>\n  );\n};\n\nexport default Woodcutting;\n","import React, { useState } from \"react\";\n\nimport \"../App.css\";\nimport Attribute from \"../components/Attribute\";\nimport Display from \"../components/Display\";\nimport ToggleButtons from \"../components/ToggleButtons\";\nimport Boosts from \"../components/Boosts\";\nimport Footer from \"../components/Footer\";\nimport CustomSwitch from \"../components/CustomSwitch\";\n\nimport gatheringData from \"../data/gathering_data.json\";\n\nconst Fishing = ({\n  currentLevel,\n  updateCurrentLevel,\n  targetLevel,\n  updateTargetLevel,\n  currentPercentage, // Add currentPercentage prop\n  updateCurrentPercentage, // Add updateCurrentPercentage prop\n}) => {\n  // Person's target element\n  const [element, setElement] = useState(['loading']);\n  const updateElement = (element) => {\n    setElement(element);\n  };\n  // Lollipop price input, to calculate Remote Bank price\n  const [lolliPrice, setLolliPrice] = useState(0);\n  const updateLolliPrice = (lolliPrice) => {\n    setLolliPrice(lolliPrice);\n  };\n\n  // Exp boosts\n  const [boostsDidUpdate, setBoostDidUpdate] = useState(false);\n  const [boosts, setBoosts] = useState([\n    { name: \"World Boost\", value: 1.5, active: false },\n  ]);\n  const [boostsEquipSets, setBoostsEquipSets] = useState([\n    { name: \"Shark's Set I, II and III\", value: 1.06, active: false },\n    { name: \"Megalodon's (Elite) Set\", value: 1.12, active: false },\n  ]);\n  const updateBoosts = (boosts, isEquipSet = false) => {\n    isEquipSet ? setBoostsEquipSets(boosts) : setBoosts(boosts);\n    setBoostDidUpdate(!boostsDidUpdate);\n  };\n\n  //   Select fished or baits\n  const [selectFishOrBait, setSelectFishOrBait] = useState(false);\n  const updateselectFishOrBait = (selectFishOrBait) => {\n    setSelectFishOrBait(selectFishOrBait);\n  };\n\n  return (\n    <>\n      <Attribute\n        maxValue={120}\n        attributeName={\"Your Fishing Level\"}\n        value={currentLevel} // Pass the currentLevel as the value\n        percentageValue={currentPercentage} // Pass the percentage value directly\n        updateAttribute={updateCurrentLevel}\n        updateAttribute2={updateCurrentPercentage}\n        isCurrentLevel={true}\n      />\n      <Attribute\n        maxValue={120}\n        attributeName={\"Target Fishing Level\"}\n        value={targetLevel} // Pass the targetLevel as the value\n        updateAttribute={updateTargetLevel}\n        sx={{\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      />\n      {selectFishOrBait === true ? (\n        // Render bait buttons\n        <ToggleButtons\n          updateElement={updateElement}\n          skillsData={gatheringData}\n          skill=\"Fishing-Baits\"\n          currentLevel={currentLevel}\n        />\n      ) : (\n        // Render fish buttons\n        <ToggleButtons\n          updateElement={updateElement}\n          skillsData={gatheringData}\n          skill=\"Fishing\"\n          currentLevel={currentLevel}\n        />\n      )}\n      <CustomSwitch\n        value={selectFishOrBait}\n        updateValue={updateselectFishOrBait}\n        element={element}\n        falseText=\"Fish\"\n        trueText=\"Bait\"\n      />\n      <Boosts boosts={boosts} updateBoosts={(boosts) => updateBoosts(boosts, false)} exclusive={false} />\n      <Boosts boosts={boostsEquipSets} updateBoosts={(boosts) => updateBoosts(boosts, true)} exclusive={true} />\n\n      {element[0] === 'Bass bait' ? (\n        <Attribute\n          maxValue={9999999999}\n          attributeName={\"Current Lolli Price\"}\n          updateAttribute={updateLolliPrice}\n          sx={{\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        />\n      ) : (\n        <></>\n      )}\n\n      <Display\n        level={currentLevel}\n        levelPercentage={currentPercentage}\n        targetLevel={targetLevel}\n        element={element}\n        keywords={[\"\"]}\n        boosts={boosts}\n        boostsEquipSets={boostsEquipSets}\n        boostsDidUpdate={boostsDidUpdate}\n        skill=\"Fishing\"\n        lolliPrice={lolliPrice}\n      />\n      <Footer />\n    </>\n  );\n};\n\nexport default Fishing;\n","import React, { useState } from \"react\";\n\nimport \"../App.css\";\nimport Attribute from \"../components/Attribute\";\nimport Display from \"../components/Display\";\nimport ToggleButtons from \"../components/ToggleButtons\";\nimport Boosts from \"../components/Boosts\";\nimport Footer from \"../components/Footer\";\n// import Alert from '@mui/material/Alert';\n\nimport monsterData from \"../data/monsters_data.json\";\n\nconst Combat = ({\n  currentLevel,\n  updateCurrentLevel,\n  targetLevel,\n  updateTargetLevel,\n  currentPercentage, // Add currentPercentage prop\n  updateCurrentPercentage, // Add updateCurrentPercentage prop\n}) => {\n\n  // Person's target monster\n  const [monster, setMonster] = useState(['loading']);\n  const updateMonster = (monster) => {\n    setMonster(monster);\n  };\n\n  // Exp boosts\n  const [boostsDidUpdate, setBoostDidUpdate] = useState(false);\n  const [boosts, setBoosts] = useState([\n    { name: \"World Boost\", value: 1.5, active: false },\n    { name: \"Exp Relic\", value: 1.05, active: false },\n    { name: \"Small or Medium Exp Pot\", value: 1.05, active: false },\n    { name: \"Large Exp Pot\", value: 1.1, active: false },\n  ]);\n  const updateBoosts = (boosts, updatedBoostName) => {\n    setBoosts(boosts);\n    setBoostDidUpdate(!boostsDidUpdate);\n  };\n\n  return (\n    <>\n      {/* <Alert severity=\"info\">Missing or bugged icons will be updated once new sprites are released</Alert> */}\n\n      <Attribute\n        maxValue={120}\n        attributeName={\"Your Combat Level\"}\n        value={currentLevel} // Pass the currentLevel as the value\n        percentageValue={currentPercentage} // Pass the percentage value directly\n        updateAttribute={updateCurrentLevel}\n        updateAttribute2={updateCurrentPercentage}\n        isCurrentLevel={true}\n      />\n      <Attribute\n        maxValue={120}\n        attributeName={\"Target Combat Level\"}\n        value={targetLevel} // Pass the targetLevel as the value\n        updateAttribute={updateTargetLevel}\n        sx={{\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      />\n      <ToggleButtons\n        updateElement={updateMonster}\n        skillsData={monsterData}\n        skill=\"Combat\"\n      />\n      <Boosts boosts={boosts} updateBoosts={updateBoosts} />\n\n      <Display\n        level={currentLevel}\n        levelPercentage={currentPercentage}\n        targetLevel={targetLevel}\n        element={monster}\n        boosts={boosts}\n        boostsEquipSets={[]} // Provide a default empty array for boostsEquipSets\n        keywords={[\"\"]}\n        skill=\"Combat\"\n      />\n      <Footer />\n    </>\n  );\n};\n\nexport default Combat;\n","import React, { useState, useMemo, useCallback } from \"react\";\nimport { debounce } from \"lodash\"; // Import lodash for debouncing\n\nimport { Tabs, Tab, Box, TextField } from \"@mui/material\";\n\nimport Header from \"./components/Header\";\nimport Smithing from \"./tabs/Smithing\";\nimport Crafting from \"./tabs/Crafting\";\nimport Cooking from \"./tabs/Cooking\";\nimport Spellbinding from \"./tabs/Spellbinding\";\nimport Mining from \"./tabs/Mining\";\nimport Woodcutting from \"./tabs/Woodcutting\";\nimport Fishing from \"./tabs/Fishing\";\nimport Combat from \"./tabs/Combat\";\n\nimport expData from \"./data/exp_data.json\"; // Import your existing experience data\n\nconst Home = (props) => {\n  const { match, history, currentTheme, updateCurrentTheme } = props;\n  const { params } = match;\n  const { page } = params;\n\n  const tabNameToIndex = {\n    0: \"smithing\",\n    1: \"crafting\",\n    2: \"cooking\",\n    3: \"spellbinding\",\n    4: \"mining\",\n    5: \"woodcutting\",\n    6: \"fishing\",\n    7: \"combat\",\n  };\n\n  const indexToTabName = {\n    smithing: 0,\n    crafting: 1,\n    cooking: 2,\n    spellbinding: 3,\n    mining: 4,\n    woodcutting: 5,\n    fishing: 6,\n    combat: 7,\n  };\n\n  const [selectedTab, setSelectedTab] = React.useState(indexToTabName[page]);\n\n  const [skillLevels, setSkillLevels] = useState({\n    smithing: { currentLevel: null, targetLevel: null, currentPercentage: 0 },\n    crafting: { currentLevel: null, targetLevel: null, currentPercentage: 0 },\n    cooking: { currentLevel: null, targetLevel: null, currentPercentage: 0 },\n    spellbinding: { currentLevel: null, targetLevel: null, currentPercentage: 0 },\n    mining: { currentLevel: null, targetLevel: null, currentPercentage: 0 },\n    woodcutting: { currentLevel: null, targetLevel: null, currentPercentage: 0 },\n    fishing: { currentLevel: null, targetLevel: null, currentPercentage: 0 },\n    combat: { currentLevel: null, targetLevel: null, currentPercentage: 0 },\n  });\n\n  const updateSkillLevel = (skill, type, value) => {\n    setSkillLevels((prev) => ({\n      ...prev,\n      [skill]: {\n        ...prev[skill],\n        [type]: value,\n      },\n    }));\n    console.log(`Updated ${skill} ${type} to ${value}`);\n  };\n\n  const handleChange = (event, newValue) => {\n    console.log(newValue);\n    history.push(`/${tabNameToIndex[newValue]}`);\n    setSelectedTab(newValue);\n  };\n\n  const [username, setUsername] = useState(\"\");\n\n  // Wrap fetchUserLevel in useCallback to stabilize its reference\n  const fetchUserLevel = useCallback(async (username) => {\n    try {\n      const response = await fetch(`https://curseofaros.com/highscores-personal.json?user=${username}`);\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch user data\");\n      }\n      const data = await response.json();\n      console.log(\"API Response:\", data); // Log the full response\n\n      if (data) {\n        setSkillLevels((prevSkillLevels) => {\n          const updatedSkillLevels = { ...prevSkillLevels };\n\n          // Iterate over the keys in the response and update skillLevels\n          Object.keys(data).forEach((skill) => {\n            if (updatedSkillLevels[skill]) {\n              const currentLevel = data[skill].level;\n              const currentExp = data[skill].xp;\n              const nextLevelExp = expData[currentLevel + 1] || currentExp; // Handle max level\n              const percentage = Math.round(\n                ((currentExp - expData[currentLevel]) / (nextLevelExp - expData[currentLevel])) * 100\n              ); // Round to 0 decimal places\n\n              updatedSkillLevels[skill].currentLevel = currentLevel; // Assign the level\n              updatedSkillLevels[skill].currentPercentage = Math.min(Math.max(percentage, 0), 99); // Cap percentage at 99\n            }\n          });\n\n          return updatedSkillLevels; // Return the updated state\n        });\n      } else {\n        console.error(\"No records found for the given username.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching user level:\", error);\n    }\n  }, []); // No dependencies needed\n\n  // Memoize the debounced function to ensure it doesn't change on re-renders\n  const debouncedFetchUserLevel = useMemo(\n    () =>\n      debounce((username) => {\n        if (username.trim() !== \"\") {\n          fetchUserLevel(username);\n        }\n      }, 500), // Wait 500ms after the user stops typing\n    [fetchUserLevel] // Add fetchUserLevel as a dependency\n  );\n\n  const handleUsernameChange = (e) => {\n    const newUsername = e.target.value;\n    setUsername(newUsername);\n    debouncedFetchUserLevel(newUsername); // Trigger the debounced fetch\n  };\n\n  return (\n    <>\n      <Header\n        title=\"Curse of Aros Skills Calculator\"\n        updateTheme={updateCurrentTheme}\n        currentTheme={currentTheme}\n      />\n      <Box sx={{ width: \"100%\", marginBottom: 2, paddingTop: 2, display: \"flex\", alignItems: \"center\" }}>\n        <TextField\n          label=\"Enter Username\"\n          value={username}\n          onChange={handleUsernameChange} // Use the debounced handler\n          sx={{ marginRight: 2 }}\n        />\n      </Box>\n      <Box sx={{ width: \"100%\" }}>\n        <Box sx={{ borderBottom: 1, borderColor: \"divider\", marginBottom: 1 }}>\n          <Tabs\n            value={selectedTab}\n            onChange={handleChange}\n            variant=\"scrollable\"\n            // scrollButtons={false}\n          >\n            <Tab label=\"Smithing\" />\n            <Tab label=\"Crafting\" />\n            <Tab label=\"Cooking\" />\n            <Tab label=\"Spellbinding\" />\n            <Tab label=\"Mining\" />\n            <Tab label=\"Woodcutting\" />\n            <Tab label=\"Fishing\" />\n            <Tab label=\"Combat\" />\n          </Tabs>\n        </Box>\n      </Box>\n      {selectedTab === 0 && (\n        <Smithing\n          currentLevel={skillLevels.smithing.currentLevel}\n          targetLevel={skillLevels.smithing.targetLevel}\n          updateCurrentLevel={(value) =>\n            updateSkillLevel(\"smithing\", \"currentLevel\", value)\n          }\n          updateTargetLevel={(value) =>\n            updateSkillLevel(\"smithing\", \"targetLevel\", value)\n          }\n          currentPercentage={skillLevels.smithing.currentPercentage}\n          updateCurrentPercentage={(value) =>\n            updateSkillLevel(\"smithing\", \"currentPercentage\", value)\n          }\n        />\n      )}\n      {selectedTab === 1 && (\n        <Crafting\n          currentLevel={skillLevels.crafting.currentLevel}\n          targetLevel={skillLevels.crafting.targetLevel}\n          updateCurrentLevel={(value) =>\n            updateSkillLevel(\"crafting\", \"currentLevel\", value)\n          }\n          updateTargetLevel={(value) =>\n            updateSkillLevel(\"crafting\", \"targetLevel\", value)\n          }\n          currentPercentage={skillLevels.crafting.currentPercentage}\n          updateCurrentPercentage={(value) =>\n            updateSkillLevel(\"crafting\", \"currentPercentage\", value)\n          }\n        />\n      )}\n      {selectedTab === 2 && (\n        <Cooking\n          currentLevel={skillLevels.cooking.currentLevel}\n          targetLevel={skillLevels.cooking.targetLevel}\n          updateCurrentLevel={(value) =>\n            updateSkillLevel(\"cooking\", \"currentLevel\", value)\n          }\n          updateTargetLevel={(value) =>\n            updateSkillLevel(\"cooking\", \"targetLevel\", value)\n          }\n          currentPercentage={skillLevels.cooking.currentPercentage}\n          updateCurrentPercentage={(value) =>\n            updateSkillLevel(\"cooking\", \"currentPercentage\", value)\n          }\n        />\n      )}\n      {selectedTab === 3 && (\n        <Spellbinding\n          currentLevel={skillLevels.spellbinding.currentLevel}\n          targetLevel={skillLevels.spellbinding.targetLevel}\n          updateCurrentLevel={(value) =>\n            updateSkillLevel(\"spellbinding\", \"currentLevel\", value)\n          }\n          updateTargetLevel={(value) =>\n            updateSkillLevel(\"spellbinding\", \"targetLevel\", value)\n          }\n          currentPercentage={skillLevels.spellbinding.currentPercentage}\n          updateCurrentPercentage={(value) =>\n            updateSkillLevel(\"spellbinding\", \"currentPercentage\", value)\n          }\n        />\n      )}\n      {selectedTab === 4 && (\n        <Mining\n          currentLevel={skillLevels.mining.currentLevel}\n          targetLevel={skillLevels.mining.targetLevel}\n          updateCurrentLevel={(value) =>\n            updateSkillLevel(\"mining\", \"currentLevel\", value)\n          }\n          updateTargetLevel={(value) =>\n            updateSkillLevel(\"mining\", \"targetLevel\", value)\n          }\n          currentPercentage={skillLevels.mining.currentPercentage}\n          updateCurrentPercentage={(value) =>\n            updateSkillLevel(\"mining\", \"currentPercentage\", value)\n          }\n        />\n      )}\n      {selectedTab === 5 && (\n        <Woodcutting\n          currentLevel={skillLevels.woodcutting.currentLevel}\n          targetLevel={skillLevels.woodcutting.targetLevel}\n          updateCurrentLevel={(value) =>\n            updateSkillLevel(\"woodcutting\", \"currentLevel\", value)\n          }\n          updateTargetLevel={(value) =>\n            updateSkillLevel(\"woodcutting\", \"targetLevel\", value)\n          }\n          currentPercentage={skillLevels.woodcutting.currentPercentage}\n          updateCurrentPercentage={(value) =>\n            updateSkillLevel(\"woodcutting\", \"currentPercentage\", value)\n          }\n        />\n      )}\n      {selectedTab === 6 && (\n        <Fishing\n          currentLevel={skillLevels.fishing.currentLevel}\n          targetLevel={skillLevels.fishing.targetLevel}\n          updateCurrentLevel={(value) =>\n            updateSkillLevel(\"fishing\", \"currentLevel\", value)\n          }\n          updateTargetLevel={(value) =>\n            updateSkillLevel(\"fishing\", \"targetLevel\", value)\n          }\n          currentPercentage={skillLevels.fishing.currentPercentage}\n          updateCurrentPercentage={(value) =>\n            updateSkillLevel(\"fishing\", \"currentPercentage\", value)\n          }\n        />\n      )}\n      {selectedTab === 7 && (\n        <Combat\n          currentLevel={skillLevels.combat.currentLevel}\n          targetLevel={skillLevels.combat.targetLevel}\n          updateCurrentLevel={(value) =>\n            updateSkillLevel(\"combat\", \"currentLevel\", value)\n          }\n          updateTargetLevel={(value) =>\n            updateSkillLevel(\"combat\", \"targetLevel\", value)\n          }\n          currentPercentage={skillLevels.combat.currentPercentage}\n          updateCurrentPercentage={(value) =>\n            updateSkillLevel(\"combat\", \"currentPercentage\", value)\n          }\n        />\n      )}\n    </>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport \"./App.css\";\nimport Home from \"./Home\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport HttpsRedirect from \"react-https-redirect\";\n\nconst App = ({ currentTheme, updateCurrentTheme }) => {\n\n  return (\n    <HttpsRedirect>\n      <Switch>\n        <Redirect exact from=\"/\" to=\"/smithing\" />\n        <Route\n          exact\n          path=\"/:page?\"\n          render={(props) => (\n            <Home\n              {...props}\n              currentTheme={currentTheme}\n              updateCurrentTheme={updateCurrentTheme}\n            />\n          )}\n        />\n      </Switch>\n    </HttpsRedirect>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\n\nimport { ThemeProvider, createTheme } from \"@mui/material/styles\";\n\nlet currentTheme = \"dark\";\nconst theme = createTheme({\n  palette: {\n    mode: currentTheme,\n  },\n});\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <App />\n      </ThemeProvider>\n    </HashRouter>\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}